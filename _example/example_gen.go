// Code generated by Warden. DO NOT EDIT.

package _example

import (
	errors "github.com/egsam98/errors"
	"net/url"
	"regexp"
	"slices"
)

var regexDataA = regexp.MustCompile("(.).,(.*)$")

func (self *Data) Validate() error {
	if self.A != nil {
		if !regexDataA.MatchString(self.A.String()) {
			return errors.New("must match regex (.).,(.*)$")
		}
	}
	{
		var zero *int
		if self.B == zero {
			return errors.New("required")
		}
	}
	if self.B != nil {
		if err := validateB(*self.B); err != nil {
			return err
		}
	}
	{
		var zero string
		if self.C == zero {
			return errors.New("required")
		}
	}
	if _, err := url.Parse(self.C); err != nil {
		return errors.New("must be URL")
	}
	if !slices.Contains([]string{"Hello", "two", "three"}, self.C) {
		return errors.New("must be one of [Hello two three]")
	}
	if len(self.Arr) < 100 {
		return errors.New("must have length 100 min")
	}
	if len(self.Arr) > 34 {
		return errors.New("must have length 34 max")
	}
	for _, elem := range self.Arr {
		if _, err := url.Parse(elem); err != nil {
			return errors.New("must be URL")
		}
	}
	if self.Nested != nil {
		if err := self.Nested.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (self *Nested) Validate() error {
	{
		var zero *string
		if self.A == zero {
			self.A = new(string)
			*self.A = "allo da"
		}
	}
	return nil
}
